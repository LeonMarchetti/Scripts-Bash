#!/bin/bash
if [ $EUID != 0 ]; then
    sudo "$0" "$@"
    exit $?
fi

# Crea una especie de "sesión" para poder iniciar servicios y abrir puertos en
# el firewall para después poder terminarlos y cerrarlos al terminar de
# usarlos.
# Modo de empleo: start [servicio/puerto] -s servicio1 servicio2 -p puerto1 puerto2
# Todos los argumentos detrás de una opción "-s" se tratan como nombres de
# servicios y detrás de "-p" como puertos.
# Si se especifican servicios o puertos antes de cualquier opción entonces el
# script "adivina" si se trata de un servicio o puerto.
# Errores:
#   1   UFW no está instalado.
#   2   Se ingresó una opción desconocida.
#   3   Alguno de los servicios no existe.
#   4   Número de puerto inválido.
#   5   Nombre de aplicación incorrecto de UFW.
#   6   No existe el servicio o aplicación de puerto UFW.
#   7   Ningún servicio o puerto especificado.

#region Colores
CLR_AMAR="\e[93m"
CLR_VERD="\e[92m"
CLR_ROJO="\e[91m"
CLR_FIN="\e[m"
#endregion

#region Constantes
RE_NUM='^[0-9]+$'
#endregion

#region Globales
# Listas de servicios y puertos activados por este script. Al terminar el
# programa se detienen y cierran los servicios y puertos en estas listas.
servicios=()
puertos=()
#endregion

#region Funciones
main() {
    comprobar_ufw
    procesar_argumentos "$@"
    comprobar_arreglos

    trap terminar EXIT
    iniciar

    echo
    echo -n "Esperando interrupción..."

    while :; do
        read -n 1 || terminar
        if [ $? = 0 ] ; then
            break
        fi
    done
}

_error() {
    if [ "$2" ]; then
        echo -e "${CLR_ROJO}start: $2${CLR_FIN}" >&2
    fi
    exit $1
}

comprobar_ufw() {
    if ! which ufw > /dev/null 2>&1; then
        _error 1 "UFW no está instalado"
    fi
}

procesar_argumentos() {
    # Bandera para indicar si el argumento es un "SERVICIO" o un "PUERTO"
    # durante el procesamiento de los argumentos.
    local flag=
    while [ "$1" ]; do
        case "$1" in
            -s) flag="SERVICIO" ;;
            -p) flag="PUERTO" ;;
            -*) _error 2 "Opción desconocida ${CLR_AMAR}$1" ;;
            *)
                case $flag in
                    "") comprobar_argumento $1 ;;
                    SERVICIO) comprobar_servicio $1 ;;
                    PUERTO) comprobar_puerto $1 ;;
                    *) echo -e "Ignorando argumento ${CLR_AMAR}$1${CLR_FIN}"
                esac
                ;;
        esac
        shift
    done
}

comprobar_argumento() {
    local argumento=$1

    if [[ $argumento =~ $RE_NUM ]]; then
        comprobar_puerto "$argumento"
    else
        if servicio_existe "$argumento"; then
            comprobar_servicio "$argumento"
        else
            if ufw_app_existe "$argumento"; then
                comprobar_puerto "$argumento"
            else
                _error 6 "No existe servicio o puerto ${CLR_AMAR}$argumento${CLR_ROJO}"
            fi
        fi
    fi
}

comprobar_servicio() {
    local servicio=$1

    if ! servicio_existe "$servicio"; then
        _error 3 "El servicio ${CLR_AMAR}$servicio${CLR_ROJO} no existe, terminando..."
    fi

    if servicio_esta_activo "$servicio"; then
        echo -e "El servicio ${CLR_AMAR}$servicio${CLR_FIN} ya estaba iniciado, ignorando..."
        return
    fi

    servicios+=($servicio)
}

servicio_existe() {
    systemctl status "$1" 1&> /dev/null
    if [ "$?" -eq 4 ]; then
        return 1
    fi
}

servicio_esta_activo() {
    systemctl is-active -q "$1"
}

comprobar_puerto() {
    local puerto=$1

    if [[ $puerto =~ $RE_NUM ]]; then
        if [ $puerto -le 0 ] || [ $puerto -ge 65536 ]; then
            _error 4 "Número de puerto ${CLR_AMAR}$puerto${CLR_ROJO} inválido"
        fi
    else
        if ! ufw_app_existe "$puerto"; then
            _error 5 "Nombre de aplicación ${CLR_AMAR}$puerto${CLR_ROJO} incorrecto"
        fi
    fi

    case `ufw status | grep "$puerto [^(]" | grep -Eo "(ALLOW|DENY)"` in
        "ALLOW")
            echo -e "El puerto ${CLR_AMAR}$puerto${CLR_FIN} ya estaba permitido, ignorando..." ;;
        "DENY"|"")
            puertos+=($puerto) ;;
        *)
            echo -e "${CLR_ROJO}Estado de puerto ${CLR_AMAR}$puerto${CLR_ROJO} desconocido${CLR_FIN}" ;;
    esac
}

ufw_app_existe() {
    ufw app list | grep -q "$1"
}

comprobar_arreglos() {
    if [ ${#servicios[@]} -eq 0 ] && [ ${#puertos[@]} -eq 0 ]; then
        _error 7 "Ningún servicio o puerto especificado"
    fi
}

iniciar() {
    for servicio in ${servicios[@]}; do
        echo -e "${CLR_VERD}Iniciando${CLR_FIN} servicio ${CLR_AMAR}$servicio${CLR_FIN}..."
        systemctl start "$servicio"
    done

    for puerto in ${puertos[@]}; do
        echo -e "${CLR_VERD}Permitiendo${CLR_FIN} puerto ${CLR_AMAR}$puerto${CLR_FIN}..."
        ufw allow "$puerto" &> /dev/null
    done
}

terminar() {
    echo -en "\r\e[K"
    for servicio in ${servicios[@]}; do
        echo -e "${CLR_ROJO}Deteniendo${CLR_FIN} servicio ${CLR_AMAR}$servicio${CLR_FIN}..."
        systemctl stop "$servicio"
    done

    for puerto in ${puertos[@]}; do
        echo -e "${CLR_ROJO}Denegando${CLR_FIN} puerto ${CLR_AMAR}$puerto${CLR_FIN}..."
        ufw deny "$puerto" &> /dev/null
    done
}
#endregion

main "$@"
